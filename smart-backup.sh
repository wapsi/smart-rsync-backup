#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
#
# This is a wrapper Bash script to combine the detect_inode_moves.py + Rsync
# when backupping some directory to the remote host via SSH
#
# The best results could be achieved if the Rsync binary (on the local and remote
# hosts) is patched to support --detect-renamed argument/functionality
#
# The script is desinged to be executed as root user
#
# Version: 1.0
# Copyright (C) 2021 Vat Vit
# License: GPLv2+
#

# Set the location of detect_inode_moves.py script
DETECT_INODE_MOVES_SCRIPT=/opt/smart-backup/detect_inode_moves.py
# Set the location (directory) where inode dump files should be stored
DETECT_INODE_DUMP_FILE_DIR="/var/cache"
# Set the location of Rsync binary
RSYNC_BINARY=$(which rsync)
# Has the Rsync binary detect-renamed.diff and detect-renamed-lax.diff patches
# applied (does Rsync support --detect-renamed argument?), see: https://github.com/WayneD/rsync-patches
# Set to 1 when it has the applied and 0 if not
# NOTE: The Rsync binary must be the patched version on the local and the remote host if you want
# to use these features!
RSYNC_DETECT_RENAMED_ENABLED=0
# Set the local root directory which will be used for inode dump + detection
# and will be Rsynced (backupped) to the remote host
ROOT_DIR="/home"
# Should we limit the inode dump + detection and Rsync to be performed in
# one file system / mount only?
# Set to 1 if you want to limit it and to 0 if not
ONE_FILE_SYSTEM_ONLY=1
# Set the directories that should be excluded from the inode dump + detection
# and Rsync in regular expression format
# Example: EXCLUDED_DIRS=('.*/\.btrfs$' '^/home/user/tmp$')
# If you don't want to exclude anything set EXCLUDED_DIRS=()
EXCLUDED_DIRS=('.*/\.btrfs$')
# Set the remote hostname to where the inode detection script will be
# copied by using Rsync, executed by using SSH and Rsync the files by using SSH
REMOTE_HOST="my-backup-server.domain.ltd"
# Set the remote host username that will be used with the SSH connections
REMOTE_USERNAME="user1"
# Set the location of the remote host's Rsync binary (this is useful if you have
# RSYNC_DETECT_RENAMED_ENABLED set to 1 and storing the patched Rsync binary somewhere
# special location)
REMOTE_RSYNC_BINARY="/usr/bin/rsync"
# Change the ROOT_DIR to something else on the final file/move script generated by detect_inode_moves.py
# detection. This is useful if you have the ROOT_DIR in different location on the remote host
# Leave it blank if you don't want to change it (REMOTE_HOST_ROOT_DIR="")
REMOTE_HOST_ROOT_DIR="/data/backups/home"
# Set the remote host directory to where the detect_inode_moves.py output script should be
# stored temporarily
REMOTE_HOST_TMP_DIR="/tmp"

##################################################### SCRIPT BEGINS #####################################################

if [ $ONE_FILE_SYSTEM_ONLY == "1" ]; then
    onefilesystemarg="--one-file-system"
else
    onefilesystemarg=""
fi
if [ "$RSYNC_DETECT_RENAMED_ENABLED" == "1" ]; then
    rsyncrenamepatchedargs="--detect-renamed"
else
    rsyncrenamepatchedargs=""
fi
mkdir -p $DETECT_INODE_DUMP_FILE_DIR
inodedumpfile="$DETECT_INODE_DUMP_FILE_DIR/inode-dump$(echo "$ROOT_DIR"|sed 's/\//_/g;s/[^[:print:]]//').txt"
if [ ! -f "$inodedumpfile" ]; then
    echo "Inode dump file ($inodedumpfile) does not exist, creating it for the first time..."
    inodedumpcmd="$DETECT_INODE_MOVES_SCRIPT -a dump -d "$ROOT_DIR" -o "$inodedumpfile" $onefilesystemarg"
    for i in "${EXCLUDED_DIRS[@]}"; do
        inodedumpcmd="$inodedumpcmd -e \"$i\""
    done
    eval nice -n 20 ionice -c 3 $inodedumpcmd
fi
if [ "$REMOTE_HOST_ROOT_DIR" != "" ]; then
    inodedetectchangerootdirarg="-r $REMOTE_HOST_ROOT_DIR"
else
    inodedetectchangerootdirarg=""
fi
if [ "$EXCLUDED_DIRS" == "" ]; then
    inodedetectrsyncfilearg=""
    inodedetectrsyncfile=""
    rsyncexlcudeddirfilearg=""
else
    inodedetectrsyncfile="${DETECT_INODE_DUMP_FILE_DIR}/rsync-excluded-dirs_$(echo "$ROOT_DIR"|sed 's/\//_/g;s/[^[:print:]]//').txt"
    inodedetectrsyncfilearg="-f $inodedetectrsyncfile"
    rsyncexlcudeddirfilearg="--exclude-from $inodedetectrsyncfile"
fi
inodedetectoutputscript="${DETECT_INODE_DUMP_FILE_DIR}/inode-move-script_$(echo "$ROOT_DIR"|sed 's/\//_/g;s/[^[:print:]]//').py"
inodedetectcmd="$DETECT_INODE_MOVES_SCRIPT -a detect -i "$inodedumpfile" $inodedetectchangerootdirarg -o "$inodedetectoutputscript" $inodedetectrsyncfilearg"
eval nice -n 20 ionice -c 3 $inodedetectcmd
if [ ! -f "$inodedetectoutputscript" ]; then
    echo "Could not find the output script generated by detect_inode_moves.py, this most probably means that there was error(s), check the output for them, aborting."
    rm -f "$inodedetectoutputscript"
    exit 1
fi
echo "Starting to generate the new inode dump file on the background already..."
inodedumpfiletmp="$DETECT_INODE_DUMP_FILE_DIR/inode-dump$(echo "$ROOT_DIR"|sed 's/\//_/g;s/[^[:print:]]//').txt.tmp"
inodedumpcmd="$DETECT_INODE_MOVES_SCRIPT -a dump -d "$ROOT_DIR" -o "$inodedumpfiletmp" $onefilesystemarg"
for i in "${EXCLUDED_DIRS[@]}"; do
    inodedumpcmd="$inodedumpcmd -e \"$i\""
done
eval nice -n 20 ionice -c 3 $inodedumpcmd > /dev/null &
inodedumppid=$!
inodedetectoutputscriptbn=$(basename "$inodedetectoutputscript")
echo "Copying the output script generated by detect_inode_moves.py ($inodedetectoutputscript) to the remote host, under ${REMOTE_HOST_TMP_DIR} directory"
$RSYNC_BINARY -a --verbose --rsync-path="$REMOTE_RSYNC_BINARY" "$inodedetectoutputscript" ${REMOTE_USERNAME}@${REMOTE_HOST}:"${REMOTE_HOST_TMP_DIR}/"
rt=$?
if [ $rt -ne 0 ]; then
    echo "There was error while copying the output script generated by detect_inode_moves.py to the remote host by using Rsync, check the output for error(s), aborting."
    rm -f "$inodedumpfiletmp" "$inodedetectoutputscript" "$inodedetectrsyncfile"
    exit 2
fi
echo "Executing the output script generated by detect_inode_moves.py remotely on the remote host by using SSH"
ssh ${REMOTE_USERNAME}@${REMOTE_HOST} "${REMOTE_HOST_TMP_DIR}/${inodedetectoutputscriptbn}"
echo "Running the actual Rsync now..."
if [ "$REMOTE_HOST_ROOT_DIR" == "" ]; then
    REMOTE_HOST_ROOT_DIR="$ROOT_DIR"
fi
rsyncmd="$RSYNC_BINARY $onefilesystemarg $rsyncrenamepatchedargs --rsync-path="$REMOTE_RSYNC_BINARY"  $rsyncexlcudeddirfilearg  --fuzzy -HAav --delay-updates --delete-delay --numeric-ids "${ROOT_DIR}/" ${REMOTE_USERNAME}@${REMOTE_HOST}:"${REMOTE_HOST_ROOT_DIR}""
eval nice -n 20 ionice -c 3 $rsyncmd
echo "Removing the output script generated by detect_inode_moves.py from the remote host"
ssh ${REMOTE_USERNAME}@${REMOTE_HOST} rm -f "${REMOTE_HOST_TMP_DIR}/${inodedetectoutputscriptbn}"
rt=$?
if [ $rt -eq 0 ] || [ $rt -eq 23 ] || [ $rt -eq 24 ]; then
    echo "Rsync completed successfully"
else
    echo "Rsync exit code was $rt which means most probably error(s), check the output for errors, aborting."
    rm -f "$inodedumpfiletmp" "$inodedetectoutputscript" "$inodedetectrsyncfile"
    exit 3
fi
echo -n "Waiting for the new inode dump to be finished... "
wait $inodedumppid
echo "Done"
rm -f "$inodedumpfile"
echo "Moving the updated inode dump file to $inodedumpfile"
mv "$inodedumpfiletmp" "$inodedumpfile"
echo "Cleaning up the temporary files"
rm -f "$inodedumpfiletmp" "$inodedetectoutputscript" "$inodedetectrsyncfile"
echo "Script finished"